[ { "title": "Sqlalchemy basics", "url": "/posts/SqlAlchemy-Basics/", "categories": "", "tags": "", "date": "2022-01-21 00:00:00 +0100", "snippet": "SQLAlchemyWhat is it ? SQLAlchemy is the most popular ORM in python world It lets you model data as classes (Object) and map them to databases (relational) It also talks to multiple DB types such as ms-sql, sqlite, postgres etc and handles the different sql dialects automatically Adapts itself to different DBs just based on the connection string ! Open sourcedWho uses it ? Dropbox Uber Reddit (not ORM though, only the core) Mozilla Openstack Freshbooks Hulu YelpWhy use it ? Using the ORM is not mandatory Mature, very fast and has been around for a while. Performance sensitive parts are implemented in C DBA Approved - Lets you swap in default generated sql with hand-optimized sql statements (provided by a DBA, for example) Unit of Work model - Organizes pending operations into queues and commits them all at once (or not, if needed)– (As opposed to active record, where every piece of DB operation is committed separately).Eager loading - load related objects (through collections and references) and return a graph. This improves performance drastically and reduces DB operationsArchitecture SA is built on top of python DB API SA Core lets you work close to the sql layer. Uses an intermediate sql-like query language that automatically gets converted into the various dialectsUsing SAPackage name: sqlalchemyNote: Code snippets below assume sqlalchemy is imported as saObjects modelled as python classes. All objects need a base class, and objects in the same db have the same base classuse “__tablename__” to specify the name of the table for any class.define a column with sa.Columndefine the object type with predefined values supplied by SA. For example,id = sa.Column(sa.String, primary_key=True)" }, { "title": "Js for react 2", "url": "/posts/JS-for-react-2/", "categories": "", "tags": "", "date": "2021-12-28 00:00:00 +0100", "snippet": "JS for ReactVariable declarationconstIdentifiers whose value does not change.const x = truex = false // Exceptionletlexical scoping for variables. Previously, variables declared inside {} or a for loop would be still globals. Variables declared with let have a limited scope.var y = &quot;Hello&quot;if (y) { let y = &quot;world&quot; console.log(&quot;block&quot;, y) // prints block world}console.log(&quot;global&quot;, y) // prints global HelloString templatesProvides an alternative to string concatenation. Supports multi-line template strings and whitespace inside the template. Useful for email html templates, for example.For exampleconsole.log(arg1 + &quot; &quot; + arg2)can be replaced withconsole.log(`${arg1} ${arg2}`)FunctionsFunction declarationstarts with the keyword function, followed by function name and args, and body. Default params are supported.function myfn(arg1, arg2 = &quot;World&quot;) { console.log(`${arg1}, ${arg2}!`)}myfn(&quot;Hello&quot;, &quot;World&quot;) // prints Hello, World!myfn(&quot;Hello&quot;) // also prints Hello, World!Function expressionAnother way is to use a function expression that creates the function as a variableconst myfn2 = function(arg1, arg2) { console.log(`${arg1}, ${arg2}!`)}myfn2(&quot;Hello&quot;, &quot;world&quot;)Declaration vs ExpressionFunction created using a function declaration can be used before the declaration itself. This wont work with function expressions. JS automatically moves (hoists) all function declarations to the top of the script.Arrow FunctionsCreate a function without using the function keyword or a return statement. Compact representationconst myfn3 = (arg1, arg2 = &quot;World&quot;) =&amp;gt; `${arg1}, ${arg2}!`myfn3(&quot;Hello&quot;) // prints Hello, World!Returning objectsEnclose the object in parenthesesconst person = (firstname, lastname) =&amp;gt; ({ first: firstname, last: lastname })console.log(person(&quot;Luke&quot;, &quot;Skywalkerrr&quot;))Arrow functions and scopeArrow functions can be used to limit the scope of “this”. Without the arrow function used in setTimeout, this would be bound to something else.const tahoe = { mountains: [&quot;Freel&quot;, &quot;Rose&quot;, &quot;Tallac&quot;, &quot;Rubicon&quot;, &quot;Silver&quot;], print: function(delay = 1000) { setTimeout(() =&amp;gt; { console.log(this.mountains.join(&quot;, &quot;)); }, delay); }};tahoe.print(); // Freel, Rose, Tallac, Rubicon, SilverCompiling JSJS code can be compiled using Babel. The purpose of compilation is to convert modern code into a version of JS code supported widely by all browsers. For example, a new feature may not be supported by all browsers. You could write code using the new feature, and use Babel to generate JS code with the same functionality but compatible with even older browsers.Babel is not the only such tool. It is one of the more popular tools.Babel REPLObjects and ArraysDestructuring ObjectsPulling desired fields out of objects into local variables.const sandwich = { bread: &quot;dutch crunch&quot;, meat: &quot;tuna&quot;, cheese: &quot;swiss&quot;, toppings: [&quot;lettuce&quot;, &quot;tomato&quot;, &quot;mustard&quot;]};const { bread, meat } = sandwich;console.log(bread, meat); // dutch crunch tunaCan also be used to destructure function arguments. In the example below, the firstname field is pulled out of the object passed in as argconst lordify = ({ firstname }) =&amp;gt; { console.log(`${firstname} of Canterbury`);};const regularPerson = { firstname: &quot;Bill&quot;, lastname: &quot;Wilson&quot;};lordify(regularPerson); // Bill of CanterburyThis can be extended to complex objectsconst regularPerson = { firstname: &quot;Bill&quot;, lastname: &quot;Wilson&quot;, spouse: { firstname: &quot;Phil&quot;, lastname: &quot;Wilson&quot; }};const lordify = ({ spouse: { firstname } }) =&amp;gt; { console.log(`${firstname} of Canterbury`);};lordify(regularPerson); // Phil of CanterburyDestructuring ArraysUsed to extract desired values from an array. Skip over unused values using a comma.const [firstAnimal] = [&quot;Horse&quot;, &quot;Mouse&quot;, &quot;Cat&quot;]; // fetches the first value from the array. In this case, Horseconst [, , thirdAnimal] = [&quot;Horse&quot;, &quot;Mouse&quot;, &quot;Cat&quot;]; // skips over the first two vals, and assigns Cat to thirdAnimalObject literal enhancementCreates an object from smaller pieces or parts. Can also be used to create object methods.const name = &quot;Tallac&quot;;const elevation = 9738;const print = function() { console.log(`Mt. ${this.name} is ${this.elevation} feet tall`);};const funHike = { name, elevation, print };funHike.print()Spread operator (…)Combine arraysvar a = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]var b = [&quot;4&quot;, &quot;5&quot;, &quot;6&quot;]var comb = [...a, ...b]console.log(comb) // prints [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]Get remaining items in an arrayconst lakes = [&quot;Donner&quot;, &quot;Marlette&quot;, &quot;Fallen Leaf&quot;, &quot;Cascade&quot;];const [first, ...others] = lakes;console.log(others.join(&quot;, &quot;)); // Marlette, Fallen Leaf, CascadeCollect arguments to a functionfunction directions(...args) { // args contains all the parameters passed to the function as a single arrayAlso works on objectsconst morning = { breakfast: &quot;oatmeal&quot;, lunch: &quot;peanut butter and jelly&quot;};const dinner = &quot;mac and cheese&quot;;const backpackingMeals = { ...morning, dinner};console.log(backpackingMeals);Asynchronous JSPromiseAn object that indicates whether an async operation is pending, completed, or failed. For example, fetch returns a promiseconsole.log(fetch(&quot;https://api.randomuser.me/?nat=US&amp;amp;results=1&quot;));Acting on a promise - then() and catch().then() takes a callback function that acts on a promise. For examplefetch(&quot;https://api.randomuser.me/?nat=US&amp;amp;results=1&quot;).then(res =&amp;gt; res.json()).then(json =&amp;gt; json.results).then(console.log).catch(console.error);Output of each then becomes the input to the next then (technically the next cbk fn in then(…))Acting on a promise - async and awaitDeclare a function as async() to indicate it needs to wait for an async operation to finish. Use await to signal which async operation to wait for.The code here looks sequential, like a normal function, compared to the chain of .then().const getFakePerson = async () =&amp;gt; { try { let res = await fetch(&quot;https://api.randomuser.me/?nat=US&amp;amp;results=1&quot;); let { results } = res.json(); console.log(results); } catch (error) { console.error(error); }};getFakePerson();Building a promiseconst getPeople = count =&amp;gt;new Promise((resolves, rejects) =&amp;gt; { const api = `https://api.randomuser.me/?nat=US&amp;amp;results=${count}`; const request = new XMLHttpRequest(); request.open(&quot;GET&quot;, api); request.onload = () =&amp;gt; request.status === 200 ? resolves(JSON.parse(request.response).results) : reject(Error(request.statusText)); request.onerror = err =&amp;gt; rejects(err); request.send();});ClassesJS used to support only prototypical inheritance. Now, the syntax has improved to look like other languages (think C++ or C#) but behind the scenes it still uses prototypes.Example with inheritanceclass Expedition extends Vacation { constructor(destination, length, gear) { super(destination, length); this.gear = gear; } print() { super.print(); console.log(`Bring your ${this.gear.join(&quot; and your &quot;)}`); }}ModulesA module is a piece of reusable code that can be incorporated into other JS code without variable name collisions. Modules export functions or variables.Exporting Use export to export anything from a module Use export default if the module exports ONE and ONLY ONE thingExamplesexport const print=(message) =&amp;gt; log(message, new Date())export const log=(message, timestamp) =&amp;gt;console.log(`${timestamp.toString()}: ${message}`)export default new Expedition(&quot;Mt. Freel&quot;, 2, [&quot;water&quot;, &quot;snack&quot;]);ImportingUse the import statement to import stuff from a module. Destructing works here, and like python import statements, imported stuff can be renamed during the importAnything export defaulted can only be imported into a single variableimport { print, log } from &quot;./text-helpers&quot;;import freel from &quot;./mt-freel&quot;;" }, { "title": "Helloworld", "url": "/posts/Helloworld/", "categories": "", "tags": "", "date": "2021-12-21 00:00:00 +0100", "snippet": "Hello World !" } ]
